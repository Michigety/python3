1) 여기서는 펑션 앱으로 특정 기능의 구현 프로세스를 하나 말씀드리려고 합니다. 

대화 기록을 토대로 할 일 목록을 만들어서 그것을 사용자에게 알려주면 좋지 않을까라는 의견이 나와서 이를 구현하고자 했습니다. 

그래서 실제로 비즈니스 로직으로 할 일 목록을, LLM을 이용해서, 기능 구현을 어떻게 진행했는지 말씀드리겠습니다. 

2) 동일 기능의 구현 방법은 여러 가지가 있겠지만, 사진대로 구성하면 얼추 동작이 될 것 같았습니다. 

여기서 가장 중요한 건 GPT일 것이고, GPT의 시스템 프롬프트부터 작성해가며 테스트를 진행했습니다. 

3) 할 일 목록이 단순히 문장으로 나열되어 있다면 데이터를 파싱하기 어려울 것이므로 특정 포맷으로 정리하여 출력하게끔 하였습니다. 

4) 그리고 원하는 출력 외에 부수적인 내용이 존재하면 별도로 처리하기 어렵기 때문에 원하는 출력 외에는 다른 건 출력하지 않도록 프롬프트를 작성했습니다. 

5) GPT 모델이 엉뚱한 입력에 대해서도 일정을 임의로 만들어서 출력하는 문제가 있었기 때문에 이를 필터링할 필요성이 있었습니다. 

그래서 GPT 모델의 출력을 Boolean으로만 출력하게끔 해서 필터링하면 어떨까 생각하게 되었고, 실제 적용해보니 필터링을 잘해주었습니다. 

6) 그리고 LLM은 내부 정책 문제인지는 정확하진 않지만, 시스템 시간을 알려주지 못 하는데, 우선 매 gpt 호출마다 current_time을 코드상에서 시스템 프롬프트에 넣는 식으로 해결하였습니다. 

7) 다만, 대화 기록을 읽어서 할 일 목록을 만들 때, 수많은 대화 기록 중에서 상대적 시간에 대한 문구를 LLM이 처리하지 못 하는 문제가 있었습니다. 

LLM이 입력받은 시간값은 오직 시스템 프롬프트의 현재 시스템 시간밖에 없는데, 이전 대화 기록에서 나타난 내일이라는 표현이 정확히 몇 월 며칠에 발생한 메시지였고,  

그 날짜의 내일인지 LLM은 판단하지 못 하기 때문에 각 메시지에 대한 생성 시간을 저장해야 할 필요성을 느꼈습니다. 

일단 GPT 입력마다 현재 시간값을 user나 assistant role의 메시지에 입력하는 건 올바른 접근이 아니라고 생각했고,  

다른 방법으로 테스트를 해보다가, 요청 메시지의 Json 포맷에 datetime 키를 넣어도 GPT 요청이 잘 들어가는 것을 발견했습니다. 

다만, datetime 키값은 gpt 요청에 같이 들어가긴 하더라도, 프롬프트로는 반영되지 않는 것처럼 보였기 때문에  

대화 기록을 messages의 입력인 json 리스트 포맷으로 넘기지 않고, 대화 기록 전문을 string으로 타입 변환 하여 프롬프트로 입력하니,  

메시지의 생성 시간을 잘 이해하는 것처럼 보여서 이렇게 처리하였습니다. 

8) 결론적으로 최종 구현은 프론트에서 대화 기록을 요청에 포함시키면 백엔드에서 GPT 모델에 일정에 대한 내용이 맞는지 확인하는 요청을 먼저 보내서 Boolean으로 응답을 받습니다. 

응답값에 따라 GPT 모델에 할 일 목록 생성을 최종 승인하거나, 일정과 관련된 내용이 아니면 False 값을 리턴합니다. 

그리고 필요에 따라 Storage Account에 저장된 Blob 데이터들, 즉, 전체 대화 기록, 현재 저장된 할 일 목록을 읽고 쓰는 작업을 합니다. 

9) 첫 번째는 필터링용으로 사용하는 모델의 시스템 프롬프트이고, 두 번째는 할 일 목록 생성에 사용되는 시스템 프롬프트입니다. 

10) 그리고 이건 실제 Storage Account에 저장된 Blob 데이터 형식입니다. 

11) todo list 로직 구현에 아쉬운 점도 있었습니다. 

아쉬운 점은 많이 있긴 했지만 두 가지만 말씀드려보자면, 첫 번째로 목적지와 방문 사유에 대한 고려를 충분히 하지 못 했다는 점입니다. 

앞서 주로 언급된 시간에 대한 처리 문제로 시간을 많이 소모했기 때문에 이 부분은 테스트도 미흡했고, 실제 동작상으로도 문제가 많이 나타날 것 같습니다. 

12) 두 번째로는 기능을 잘 활용하지 못 했다는 점입니다. 

PPT에 보이는 함수 호출 동작은 GPT가 실제 코드상에 존재하는 함수를 호출하는 기능이고, 

로컬 환경에서 잘 동작되는지까지는 테스트해봤으나, 프로젝트 구현에 있어서 이 기능을 활용하진 못 했습니다. 

사실 GPT가 함수도 호출할 수 있다고 강의에서 언급해 주셨던 것 같은데, 제가 배운 기억을 잘 상기했었다면 조금은 더 좋은 결과가 나오지 않았을까 싶습니다. 

여기까지 특정 기능의 구현 프로세스에 대해 설명드렸습니다. 